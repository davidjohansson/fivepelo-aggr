(use 'fivepelo-aggr.eventStreamFromSheet :reload)
((comp h/pprnt  sfe/groupByWeekAndPerson extractTrainingEntriesFromSheetV2) (h/testDataGs))
((comp h/pprnt  extractTrainingEntriesFromSheetV2) (h/testDataGs))
((comp h/pprnt  sfe/groupByWeekAndPerson extractTrainingEntriesFromSheetV2) (h/testDataGs))
((comp h/pprnt   extractTrainingEntriesFromSheetV2) (h/testDataGs))
(require '[fivepelo-aggr.stateFromEventStream :as sfe])
(require '[fivepelo-aggr.helpers :as h])
(sfe/weekOfYear {:type "activity", :name "David", :date "2016-09-11", :activity ""}
))
(sfe/weekOfYear {:type "activity", :name "David", :date "2016-09-11", :activity ""})
(sfe/weekOfYear {:type "activity", :name "David", :date '2016-09-11, :activity ""})
(sfe/weekOfYear {:type "activity", :name "David", :date "2016-09-11", :activity ""})
(require '[fivepelo-aggr.helpers :as h])
(sfe/weekOfYear {:type "activity", :name "David", :date "2016-09-11", :activity ""})
(require '[fivepelo-aggr.helpers :as h])
(use '[clojure.tools.namespace.repl :only (refresh)])
(require '[fivepelo-aggr.helpers :as h] :reload)
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
(require '[fivepelo-aggr.helpers :as h])
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
(require '[fivepelo-aggr.stateFromEventStream :as sfe])
(sfe/weekOfYear {:type "activity", :name "David", :date "2016-09-11", :activity ""})
(sfe/weekOfYear {:type "activity", :name "David", :date "20160911", :activity ""})
(require '[fivepelo-aggr.helpers :as h])
(require '[fivepelo-aggr.stateFromEventStream :as sfe])
(sfe/weekOfYear {:type "activity", :name "David", :date "20160911", :activity ""})
(sfe/weekOfYear {:type "activity", :name "David", :date "2016-09-11", :activity ""})
((comp h/pprnt   extractTrainingEntriesFromSheetV2) (h/testDataGs))
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
((comp h/pprnt   extractTrainingEntriesFromSheetV2) (h/testDataGs))
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
((comp h/pprnt   extractTrainingEntriesFromSheetV2) (h/testDataGs))
(require '[fivepelo-aggr.stateFromEventStream :as sfe])
(require '[fivepelo-aggr.helpers :as h])
((comp h/pprnt   extractTrainingEntriesFromSheetV2) (h/testDataGs))
((comp h/pprnt  sfe/groupByWeekAndPerson  extractTrainingEntriesFromSheetV2) (h/testDataGs))
(require '[fivepelo-aggr.helpers :as h])
(require '[fivepelo-aggr.stateFromEventStream :as sfe])
((comp h/pprnt  sfe/groupByWeekAndPerson  extractTrainingEntriesFromSheetV2) (h/testDataGs))
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
((comp h/pprnt  sfe/groupByWeekAndPerson  extractTrainingEntriesFromSheetV2) (h/testDataGs))
(require '[fivepelo-aggr.helpers :as h])
require '[fivepelo-aggr.stateFromEventStream :as sfe]
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
((comp h/pprnt  sfe/groupByWeekAndPerson  extractTrainingEntriesFromSheetV2) (h/testDataGs))
(require '[fivepelo-aggr.stateFromEventStream :as sfe])
((comp h/pprnt  sfe/groupByWeekAndPerson  extractTrainingEntriesFromSheetV2) (h/testDataGs))
(require '[fivepelo-aggr.helpers :as h])
(use '[fivepelo-aggr.stateFromEventStream :as sfe])
((comp h/pprnt  sfe/groupByWeekAndPerson) (h/testData))
(require '[fivepelo-aggr.helpers :as h])
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
(extractTrainingEntriesFromSheetV2 (h/testDataGs))
 (h/testDataGs)
(extractTrainingEntriesFromSheetV2 (h/testDataGs))
(h/pprn (extractTrainingEntriesFromSheetV2 (h/testDataGs)))
(h/pprnt (extractTrainingEntriesFromSheetV2 (h/testDataGs)))
clear
(h/pprnt (extractTrainingEntriesFromSheetV2 (h/testDataGs)))
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
(doc alength)
(alength (1 2 3))
(alength (:s :v))
(count '(1 2 3))
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
(h/pprnt (extractTrainingEntriesFromSheetV2 (h/testDataGs)))
(map #(+ 1 %)(range 1 7))
(map #(+ 0 %)(range 1 7))
(map #(+ 0 %)(range (count '(1 2 )) 7))
(doc conj)
(map #(+ 0 %)(range 1 7))
(range (count '(1 2 )) 7))
(range (count '(1 2 )) 7)
(map #(:s) (range (count '(1 2 )) 7))
(map #(%) (range (count '(1 2 )) 7))
(range (count '(1 2 )) 7)
(repeat "" 4)
(repeat "x" 4)
(repeat 5 "x")
(repeat 5 "\"\"")
(repeat 5 "")
(repeat (- 7 (count '(1 2 3))) "")
(repeat (- 7 (count '(1 2 ))) "")
(def list '(1 2 3))
(def listan '(1 2 3))
(listan)
listan
(repeat (- 7 (count listan)) "")
(conj (repeat (- 7 (count listan)) "") listan)
(flatten (conj (repeat (- 7 (count listan)) "") listan))
(require '[fivepelo-aggr.helpers :as h])
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
(h/pprnt (extractTrainingEntriesFromSheetV2 (h/testDataGs)))
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
(h/pprnt (extractTrainingEntriesFromSheetV2 (h/testDataGs)))
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
(h/pprnt (extractTrainingEntriesFromSheetV2 (h/testDataGs)))
(comp h/pprnt extractTrainingEntriesFromSheetV2 h/testDataGs))
(comp h/pprnt extractTrainingEntriesFromSheetV2 h/testDataGs)
((comp h/pprnt extractTrainingEntriesFromSheetV2) h/testDataGs)
((comp h/pprnt extractTrainingEntriesFromSheetV2) (h/testDataGs))
(h/pprnt (extractTrainingEntriesFromSheetV2 (h/testDataGs)))
(h/pprnt (group-by :name (extractTrainingEntriesFromSheetV2 (h/testDataGs))))
(h/pprnt (keys (group-by :name (extractTrainingEntriesFromSheetV2 (h/testDataGs)))))
(h/pprnt (values (group-by :name (extractTrainingEntriesFromSheetV2 (h/testDataGs)))))
(h/pprnt (vals (group-by :name (extractTrainingEntriesFromSheetV2 (h/testDataGs)))))
(h/pprnt (map #(count %) (vals (group-by :name (extractTrainingEntriesFromSheetV2 (h/testDataGs))))))
(every? (= 49) '(49 49))
(every? #(= 49) '(49 49))
(every? #(= 49 %) '(49 49))
(every? #(= 49 %) '(49 41))
(require '[fivepelo-aggr.helpers :as h])
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
(group-by :name (extractTrainingEntriesFromSheetV2 (testDataGs)))
(group-by :name (extractTrainingEntriesFromSheetV2 (h/testDataGs)))
(:Lotta (group-by :name (extractTrainingEntriesFromSheetV2 (h/testDataGs))))
("Lotta" (group-by :name (extractTrainingEntriesFromSheetV2 (h/testDataGs))))
( (group-by :name (extractTrainingEntriesFromSheetV2 (h/testDataGs))) "Lotta")
( (group-by :name (extractTrainingEntriesFromSheetV2 (h/testDataGs))) "Peter")
(map #(count %)(group-by :name (extractTrainingEntriesFromSheetV2 (h/testDataGs))) "Peter")
(map #(count %)(group-by :name (extractTrainingEntriesFromSheetV2 (h/testDataGs))) "Peter"))
(map #(count %)(group-by :name (extractTrainingEntriesFromSheetV2 (h/testDataGs))) "Peter")
( (group-by :name (extractTrainingEntriesFromSheetV2 (h/testDataGs))) "Peter")
(map count ( (group-by :name (extractTrainingEntriesFromSheetV2 (h/testDataGs))) "Peter"))
(map #(count %) ( (group-by :name (extractTrainingEntriesFromSheetV2 (h/testDataGs))) "Peter"))
( (group-by :name (extractTrainingEntriesFromSheetV2 (h/testDataGs))) "Peter")
(count ((group-by :name (extractTrainingEntriesFromSheetV2 (h/testDataGs))) "Peter"))
(count ((group-by :name (extractTrainingEntriesFromSheetV2 (h/testDataGs))) "Lotta"))
(count ((group-by :name (extractTrainingEntriesFromSheetV2 (h/testDataGs)) Henrik"))
(count ((group-by :name (extractTrainingEntriesFromSheetV2 (h/testDataGs)) "Henrik"))
(count ((group-by :name (extractTrainingEntriesFromSheetV2 (h/testDataGs))) "Lotta"))
(count ((group-by :name (extractTrainingEntriesFromSheetV2 (h/testDataGs))) "Henrik"))
(count ((group-by :name (extractTrainingEntriesFromSheetV2 (h/testDataGs))) "David"))
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
(padWithEmptyWeeks '([], []))
(count '([], []))
(conj (repeat (- 7 (count '([] [] []))) []) '([] [] []))))
(conj (repeat (- 7 (count '([] [] []))) []) '([] [] [])))
(conj (repeat (- 7 (count '([] [] []))) []) '([] [] []))
(flatten (conj (repeat (- 7 (count '([] [] []))) []) '([] [] [])))
(conj (repeat (- 7 (count '([] [] []))) []) '([] [] []))
(flatten (conj (repeat (- 7 (count '([] [] []))) []) '([] [] [])))
(flatten '(([] [] []) [] [] [] [])
))
)
(flatten '(([] [] []) [] [] [] []))
(flatten '('([] [] []) [] [] [] []))
(def listan '('() '()))
(conj (repeat (- 7 (count listan)) []) listan)
(conj (repeat (- 7 (count listan)) []) listan))
(conj (repeat (- 7 (count listan)) '()) listan))
(repeat (- 7 (count listan)) '())
(conj (repeat (- 7 (count listan)) '()) listan)
(conj (repeat (- 7 (count listan)) ()) listan)
(empty '())
(conj (repeat (- 7 (count listan)) (empty '())) listan)
(flatten (conj (repeat (- 7 (count listan)) (empty '())) listan))
(require '[fivepelo-aggr.helpers :as h])
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
(flatten (conj (repeat (- 7 (count listan)) (empty '())) listan))
(def listan '('() '()))
(flatten (conj (repeat (- 7 (count listan)) (empty '())) listan))
(flatten (conj (repeat (- 7 (count listan)) (empty ())) listan))
(flatten (conj (repeat (- 7 (count listan)) (empty '())) listan))
(repeat 2 '(""))
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
(require '[fivepelo-aggr.helpers :as h])
(padWithEmptyWeeks '('()))
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
(require '[fivepelo-aggr.helpers :as h])
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
(padWithEmptyWeeks '('()))
(padWithEmptyWeeks '('("")))
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
(padWithEmptyWeeks '('("")))
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
(require '[fivepelo-aggr.helpers :as h])
(h/testDataGs)
(:training h/testDataGs)
(:trainingData h/testDataGs)
(:trainingData (h/testDataGs)
(:trainingData (h/testDataGs))
("Henrik (:trainingData (h/testDataGs)))
("Henrik (:trainingData (h/testDataGs))))
("Henrik (:trainingData (h/testDataGs)))
("Henrik (:trainingData (h/testDataGs))
("Henrik" (:trainingData (h/testDataGs)))
(nth 0 (:trainingData (h/testDataGs)))
(nth (:trainingData (h/testDataGs)) 0)
(nth (:trainingData (h/testDataGs)) 3)
(:training (nth (:trainingData (h/testDataGs)) 3))
(:training (nth (:trainingData (h/testDataGs)) 2))
(padWithEmptyDays (:training (nth (:trainingData (h/testDataGs)) 2)))
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
(padWithEmptyDays (:training (nth (:trainingData (h/testDataGs)) 2)))
(:training (nth (:trainingData (h/testDataGs)) 2))
(padWithEmptyWeeks (:training (nth (:trainingData (h/testDataGs)) 2)))
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
(padWithEmptyWeeks (:training (nth (:trainingData (h/testDataGs)) 2)))
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
(padWithEmptyWeeks (:training (nth (:trainingData (h/testDataGs)) 2)))
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
(padWithEmptyWeeks (:training (nth (:trainingData (h/testDataGs)) 2)))
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
(padWithEmptyWeeks (:training (nth (:trainingData (h/testDataGs)) 2)))
(:training (nth (:trainingData (h/testDataGs)) 2))
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
(padWithEmptyWeeks (:training (nth (:trainingData (h/testDataGs)) 2)))
(conj [1 2] [3 4])
(concat [1 2] [3 4])
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
(padWithEmptyWeeks (:training (nth (:trainingData (h/testDataGs)) 2)))
(padWithEmptyDays (padWithEmptyWeeks (:training (nth (:trainingData (h/testDataGs)) 2))))
(padWithEmptyWeeks (:training (nth (:trainingData (h/testDataGs)) 2)))
(map padWithEmptyDays (padWithEmptyWeeks (:training (nth (:trainingData (h/testDataGs)) 2))))
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
(require '[fivepelo-aggr.helpers :as h])
(map padWithEmptyDays (padWithEmptyWeeks (:training (nth (:trainingData (h/testDataGs)) 2))))
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
(require '[fivepelo-aggr.helpers :as h])
  (pprnt ( every? 49 (map #(count %) (vals (group-by :name (extractTrainingEntriesFromSheetV2 (testDataGs))))) ))
( every? 49 (map #(count %) (vals (group-by :name (extractTrainingEntriesFromSheetV2 (testDataGs))))) )
( every? 49 (map #(count %) (vals (group-by :name (extractTrainingEntriesFromSheetV2 (h/testDataGs))))) )
(map #(count %) (vals (group-by :name (extractTrainingEntriesFromSheetV2 (h/testDataGs))))) 
(doc every?)
(every #(= 49 %) (map #(count %) (vals (group-by :name (extractTrainingEntriesFromSheetV2 (h/testDataGs))))) )
(every? #(= 49 %) (map #(count %) (vals (group-by :name (extractTrainingEntriesFromSheetV2 (h/testDataGs))))) )
(require '[fivepelo-aggr.helpers :as h])
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
((comp h/pprnt extractTrainingEntriesFromSheetV2) (h/testDataGs))
((comp h/pprnt h/cljToJson extractTrainingEntriesFromSheetV2) (h/testDataGs))
(require '[fivepelo-aggr.helpers :as h])
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
((comp h/pprnt h/cljToJson extractTrainingEntriesFromSheetV2) (h/testDataGs))
(spit "asjson.json" ((comp h/pprnt h/cljToJson extractTrainingEntriesFromSheetV2) (h/testDataGs)))
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
(spit "asjson.json" ((comp h/pprnt h/cljToJson extractTrainingEntriesFromSheetV2) (h/testDataGs)))
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
(spit "asjson.json" ((comp h/pprnt h/cljToJson extractTrainingEntriesFromSheetV2) (h/testDataGs)))
(doc replace)
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
(spit "asjson.json" ((comp h/pprnt h/cljToJson extractTrainingEntriesFromSheetV2) (h/testDataGs)))
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
(spit "asjson.json" ((comp h/pprnt h/cljToJson extractTrainingEntriesFromSheetV2) (h/testDataGs)))
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
(spit "asjson.json" ((comp h/pprnt h/cljToJson extractTrainingEntriesFromSheetV2) (h/testDataGs)))
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
(spit "asjson.json" ((comp h/pprnt h/cljToJson extractTrainingEntriesFromSheetV2) (h/testDataGs)))
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
(spit "asjson.json" ((comp h/pprnt h/cljToJson extractTrainingEntriesFromSheetV2) (h/testDataGs)))
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
(spit "asjson.json" ((comp h/pprnt h/cljToJson extractTrainingEntriesFromSheetV2) (h/testDataGs)))
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
(spit "asjson.json" ((comp h/pprnt h/cljToJson extractTrainingEntriesFromSheetV2) (h/testDataGs)))
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
(spit "asjson.json" ((comp h/pprnt h/cljToJson extractTrainingEntriesFromSheetV2) (h/testDataGs)))
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
(spit "asjson.json" ((comp h/pprnt h/cljToJson extractTrainingEntriesFromSheetV2) (h/testDataGs)))
(clojure.string/replace "Löpning \"hansa style\" längs ringmuren i Visby, 50 situps" "\"")
(clojure.string/replace #"\"" "Löpning \"hansa style\" längs ringmuren i Visby, 50 situps")
(clojure.string/replace "Löpning \"hansa style\" längs ringmuren i Visby, 50 situps" #"\"" "")
(require '[fivepelo-aggr.helpers :as h])
(h/jsonClearString "Löpning \"hansa style\" längs ringmuren i Visby, 50 situps")
(require '[fivepelo-aggr.helpers :as h])
(h/jsonClearString "Löpning \"hansa style\" längs ringmuren i Visby, 50 situps")
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
(require '[fivepelo-aggr.helpers :as h])
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
(require '[fivepelo-aggr.helpers :as h])
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
(h/jsonClearString "Löpning \"hansa style\" längs ringmuren i Visby, 50 situps")
(spit "asjson.json" ((comp h/pprnt h/cljToJson extractTrainingEntriesFromSheetV2) (h/testDataGs)))
(spit "asjson.json" ((comp h/pprnt h/cljToJson extractTrainingEntriesFromSheetV2) (h/sheetData "anewfile.json")))
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
(require '[fivepelo-aggr.helpers :as h])
(spit "asjson.json" ((comp h/pprnt h/cljToJson extractTrainingEntriesFromSheetV2) (h/sheetData "anewfile.json")))
(def idtouser {"David" :88dkkadf})
("David" idtouser)
idtouser
(key idtouser)
(keys idtouser)
(values idtouser)
(docs values)
(get "David" idtouser)
(doc get)
(get idtouser "David")
(require '[fivepelo-aggr.helpers :as h])
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
(extractTrainingEntriesFromSheetV2 (h/sheetData "anewfile.json"))
(group-by :name (extractTrainingEntriesFromSheetV2 (h/sheetData "anewfile.json")))
(keys (group-by :name (extractTrainingEntriesFromSheetV2 (h/sheetData "anewfile.json"))))
(doc get)
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
(keys (group-by :name (extractTrainingEntriesFromSheetV2 (h/sheetData "anewfile.json"))))
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
(keys (group-by :name (extractTrainingEntriesFromSheetV2 (h/sheetData "anewfile.json"))))
(get idtouser "David")
(get idtouser "Davi" "bulle")
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
(keys (group-by :name (extractTrainingEntriesFromSheetV2 (h/sheetData "anewfile.json"))))
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
(keys (group-by :name (extractTrainingEntriesFromSheetV2 (h/sheetData "anewfile.json"))))
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
(keys (group-by :name (extractTrainingEntriesFromSheetV2 (h/sheetData "anewfile.json"))))
(participantId "Peter")
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
(participantId "Peter")
(keys (group-by :name (extractTrainingEntriesFromSheetV2 (h/sheetData "anewfile.json"))))
(participantId "Peter")
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
(participantId "Peter")
(keys (group-by :name (extractTrainingEntriesFromSheetV2 (h/sheetData "anewfile.json"))))
(participantId "Peter")
(require '[fivepelo-aggr.helpers :as h])
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
(participantId "Peter")
(keys (group-by :name (extractTrainingEntriesFromSheetV2 (h/sheetData "anewfile.json"))))
(participantId "dd")
(participantId "Peter")
(require '[fivepelo-aggr.helpers :as h])
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
(participantId "Peter")
(keys (group-by :name (extractTrainingEntriesFromSheetV2 (h/sheetData "anewfile.json"))))
(keys (group-by :ud (extractTrainingEntriesFromSheetV2 (h/sheetData "anewfile.json"))))
(keys (group-by :id (extractTrainingEntriesFromSheetV2 (h/sheetData "anewfile.json"))))
(keys (group-by :participantId (extractTrainingEntriesFromSheetV2 (h/sheetData "anewfile.json"))))
(spit "asjson.json" ((comp h/pprnt h/cljToJson extractTrainingEntriesFromSheetV2) (h/sheetData "anewfile.json")))
(keys (group-by :participantId (extractTrainingEntriesFromSheetV2 (h/sheetData "anewfile.json"))))
(keys (group-by :name (extractTrainingEntriesFromSheetV2 (h/sheetData "anewfile.json"))))
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
(keys (group-by :participantId (extractTrainingEntriesFromSheetV2 (h/sheetData "anewfile.json"))))
(spit "asjson.json" ((comp h/pprnt h/cljToJson extractTrainingEntriesFromSheetV2) (h/sheetData "anewfile.json")))
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
(spit "asjson.json" ((comp h/pprnt h/cljToJson extractTrainingEntriesFromSheetV2) (h/sheetData "anewfile.json")))
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
(spit "asjson.json" ((comp h/pprnt h/cljToJson extractTrainingEntriesFromSheetV2) (h/sheetData "anewfile.json")))
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
(spit "asjson.json" ((comp h/pprnt h/cljToJson extractTrainingEntriesFromSheetV2) (h/sheetData "anewfile.json")))
(doc spit)
(spit (+ 2 2) "a.json")
(spit "dd" "a.json")
(str (java.util.UUID/randomUUID)))
(str (java.util.UUID/randomUUID))
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
(require '[fivepelo-aggr.helpers :as h])
(spit "asjson.json" ((comp h/pprnt h/cljToJson extractTrainingEntriesFromSheetV2) (h/sheetData "raw-from-gs.json")))
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
(require '[fivepelo-aggr.helpers :as h])
 ((comp h/pprnt h/cljToJson extractTrainingEntriesFromSheetV2) (h/sheetData "raw-from-gs.json"))
(require '[fivepelo-aggr.helpers :as h])
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
 ((comp h/pprnt h/cljToJson extractTrainingEntriesFromSheetV2) (h/sheetData "raw-from-gs.json"))
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
(require '[fivepelo-aggr.helpers :as h])
(def participants {"Peter" :ddffa})
(def participants2 {"Peter" :ddffa})
(get participants2 "Peter")
(get participants2 "Peterd")
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
 ((comp h/pprnt h/cljToJson extractTrainingEntriesFromSheetV2) (h/sheetData "raw-from-gs.json"))
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
 ((comp h/pprnt h/cljToJson extractTrainingEntriesFromSheetV2) (h/sheetData "raw-from-gs.json"))
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
 ((comp h/pprnt h/cljToJson extractTrainingEntriesFromSheetV2) (h/sheetData "raw-from-gs.json"))
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
 ((comp h/pprnt h/cljToJson extractTrainingEntriesFromSheetV2) (h/sheetData "raw-from-gs.json"))
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
 ((comp h/pprnt h/cljToJson extractTrainingEntriesFromSheetV2) (h/sheetData "raw-from-gs.json"))
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
 ((comp h/pprnt h/cljToJson extractTrainingEntriesFromSheetV2) (h/sheetData "raw-from-gs.json"))
(or false (throw Exception. "dad"))
(or false (throw (Exception. "dad")))
(or true (throw (Exception. "dad")))
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
 ((comp h/pprnt h/cljToJson extractTrainingEntriesFromSheetV2) (h/sheetData "raw-from-gs.json"))
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
 ((comp h/pprnt h/cljToJson extractTrainingEntriesFromSheetV2) (h/sheetData "raw-from-gs.json"))
(doc and)
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
 ((comp h/pprnt h/cljToJson extractTrainingEntriesFromSheetV2) (h/sheetData "raw-from-gs.json"))
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
 ((comp h/pprnt h/cljToJson extractTrainingEntriesFromSheetV2) (h/sheetData "raw-from-gs.json"))
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
 ((comp h/pprnt h/cljToJson extractTrainingEntriesFromSheetV2) (h/sheetData "raw-from-gs.json"))
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
 ((comp h/pprnt h/cljToJson extractTrainingEntriesFromSheetV2) (h/sheetData "raw-from-gs.json"))
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
 ((comp h/pprnt h/cljToJson extractTrainingEntriesFromSheetV2) (h/sheetData "raw-from-gs.json"))
(str (java.util.UUID/randomUUID))
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
 ((comp h/pprnt h/cljToJson extractTrainingEntriesFromSheetV2) (h/sheetData "raw-from-gs.json"))
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
 ((comp h/pprnt h/cljToJson extractTrainingEntriesFromSheetV2) (h/sheetData "raw-from-gs.json"))
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
 ((comp h/pprnt h/cljToJson extractTrainingEntriesFromSheetV2) (h/sheetData "raw-from-gs.json"))
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
 ((comp h/pprnt h/cljToJson extractTrainingEntriesFromSheetV2) (h/sheetData "raw-from-gs.json"))
(doc replace)
(doc filter)
 ((comp h/pprnt h/cljToJson extractTrainingEntriesFromSheetV2) (h/sheetData "raw-from-gs.json"))
(require '[fivepelo-aggr.helpers :as h])
(require '[fivepelo-aggr.stateFromEventStream :as sfe])
(use 'fivepelo-aggr.eventStreamFromSheet :reload)
((comp h/pprnt  sfe/groupByWeekAndPerson  extractTrainingEntriesFromSheetV2) (h/testDataGs))
(require '[fivepelo-aggr.helpers :as h])
(h/parseDate2 '2021-05-29')
(h/parseDate2 "2021-05-29")
(require '[fivepelo-aggr.helpers :as h])
(h/parseDate2 "2021-05-29")
(require '[fivepelo-aggr.helpers :as h])
(use 'fivepelo-aggr.helpers :reload)
(h/parseDate2 "2021-05-29")
(h/parseDate3)
(use 'fivepelo-aggr.helpers :reload)
(h/parseDate3)
(use 'fivepelo-aggr.helpers :reload)
(jt/offset-date-time)
(jt/to-epoch-millis (jt/offset-date-time))
(jt/to-millis-from-epoch (jt/offset-date-time))
(jt/to-millis-from-epoch (jt/local-time))
(jt/to-millis-from-epoch (jt/offset-date-time))
(h/parseDate "2021-05-29")
(jt/year (h/parseDate "2021-05-29"))
(jt/month (h/parseDate "2021-05-29"))
(jt/day (h/parseDate "2021-05-29"))
(jt/day-of-month (h/parseDate "2021-05-29"))
(jt/days (h/parseDate "2021-05-29"))
(jt/day-of-month (h/parseDate "2021-05-29"))
(jt/day-of-month)
(jt/year-month (h/parseDate "2021-05-29"))
(jt/day-of-month (h/parseDate "2021-05-29"))
(jt/to-millis-from-epoch (jt/offset-date-time (2021)))
(jt/to-millis-from-epoch (jt/offset-date-time))
(jt/to-millis-from-epoch (jt/offset-date-time (2021 05 10 10)   ))
(jt/to-millis-from-epoch (jt/offset-date-time 2021 05 10 10   ))
(jt/day-of-month (h/parseDate "2021-05-29"))
(c/to-long "2021-05-21")
(use 'fivepelo-aggr.helpers :reload)
(c/to-long "2021-05-21")
(clj-time.coerce/to-long "2021-05-21")
clear
(use 'fivepelo-aggr.helpers :reload)
(epoch "2021-05-21")
(use 'fivepelo-aggr.helpers :reload)
(jt/days (h/parseDate "2021-05-29"))
(require '[fivepelo-aggr.helpers :as h])
require '[fivepelo-aggr.stateFromEventStream :as sfe])
(require '[fivepelo-aggr.stateFromEventStream :as sfe])
(jt/as (helpers/parseDate (get activity :date)) :aligned-week-of-year))
(jt/as (helpers/parseDate (get activity :date)) :aligned-week-of-year)
(jt/as (helpers/parseDate "2021-01-06) :aligned-week-of-year)
"
(jt/as (helpers/parseDate "2021-01-06") :aligned-week-of-year)
(jt/as (helpers/parseDate "2021-01-08") :aligned-week-of-year)
(jt/as (helpers/parseDate "2021-01-08") :week-of-year)
(jt/as (helpers/parseDate "2021-01-08") :aligned-week-of-year)
exit
(require '[fivepelo-aggr.stateFromEventStream :as sfe])
(require '[fivepelo-aggr.helpers :as h])
(jt/as (helpers/parseDate "2021-01-08") :aligned-week-of-year)
(require '[fivepelo-aggr.helpers :as h])
(main.Woy/instant (helpers/parseDate (get activity :date))  )
(require '[fivepelo-aggr.helpers :as h])
(main.Woy/instant (helpers/parseDate (get activity :date))  )
(require '[fivepelo-aggr.helpers :as h])
(main.Woy/instant (helpers/parseDate (get activity :date))  )
q
exit
(require '[fivepelo-aggr.helpers :as h])
(main.Woy/instant (helpers/parseDate (get activity :date))  )
(require '[fivepelo-aggr.stateFromEventStream :as sfe])
exit
(require '[fivepelo-aggr.stateFromEventStream :as sfe])
(import Woy)
(import Woya)
(Woy/instant "2021-01-08")
(require '[fivepelo-aggr.stateFromEventStream :as sfe])
(weekOfYeart)
(require '[fivepelo-aggr.stateFromEventStream :as sfe])
(sfe/weekOfYeart)
(sfe/weekOfYeart :a)
(require '[fivepelo-aggr.stateFromEventStream :as sfe])
(sfe/weekOfYeart)
(sfe/weekOfYeart :a)
(Woy/instant "2021-01-08")
exit
q(keys (group-by :name (extractTrainingEntriesFromSheetV2 (h/sheetData "anewfile.json"))))
((comp h/pprnt  sfe/groupByWeekAndPerson) (h/testData))
(require '[fivepelo-aggr.helpers :as h])
(require '[fivepelo-aggr.stateFromEventStream :as sfe])
((comp h/pprnt  sfe/groupByWeekAndPerson) (h/testData))
((comp h/pprnt  sfe/groupByWeekAndPerson) (h/sheetData ''))
((comp h/pprnt  sfe/groupByWeekAndPerson) (h/sheetData))
((comp h/pprnt  sfe/groupByWeekAndPerson) (h/sheetData "test.json"))
((comp h/pprnt  sfe/groupByWeekAndPerson) (h/sheetData "scripts/eventstream/output/period30.json"))
 (h/cljToJSon((comp h/pprnt  sfe/groupByWeekAndPerson) (h/sheetData "scripts/eventstream/output/period30.json")))
 (h/cljToJSon ((comp h/pprnt  sfe/groupByWeekAndPerson) (h/sheetData "scripts/eventstream/output/period30.json")))
 (h/cljToJson ((comp h/pprnt  sfe/groupByWeekAndPerson) (h/sheetData "scripts/eventstream/output/period30.json")))
  ((comp h/pprnt  (h/cljToJson sfe/groupByWeekAndPerson)) (h/sheetData "scripts/eventstream/output/period30.json"))
  ((comp h/pprnt  h/cljToJson sfe/groupByWeekAndPerson) (h/sheetData "scripts/eventstream/output/period30.json"))
